pc.script.attribute('speedan', 'number', 0.1, {
    min: 0.05,
    max: 0.3,
    step: 0.05,
    decimalPrecision: 2
});

pc.script.create('movement', function (app) {
    // Creates a new Movement instance
    var Movement = function (entity) {
        this.entity = entity;
        this.startAcce = 0.02;
        this.force = new pc.Vec3();
    };

    Movement.prototype = {
        // Called once after all resources are loaded and before the first update
        initialize: function () {
        },
        speedIncrease: function(){
            this.isChanging = true;
        },
        speedDecrease: function(){
            this.isChanging = false;
        },
        accelerate: function(){
            this.entity.rigidbody.applyImpulse(this.force);
        },
        easy: function(){
            app.context.systems.rigidbody.setGravity(0,-4,0);
            this.speedan = 0.15;
            this.dif = "easy";
        },
        
        normal: function(){
            app.context.systems.rigidbody.setGravity(0,-6.2,0);
            this.speedan = 0.3;
            this.dif = "normal";
        },
        
        hard: function(){
            app.context.systems.rigidbody.setGravity(0,-7,0);
            this.speedan = 0.7;
            this.dif = "hard";
        },

        // Called every frame, dt is time in seconds since last update
        update: function (dt) {
            this.frameRate = 1 / dt;
            if(this.frameRate >= 20){
                if(this.dif == "hard"){
                    this.speedan = 0.5;
                }
                if(this.dif == "normal"){
                    this.speedan = 0.2;
                }
                if(this.dif == "easy"){
                    this.speedan = 0.15;
                }
            }
            if(this.frameRate < 20 && this.frameRate > 10){
                if(this.dif == "hard"){
                    this.speedan = 0.6;
                }
                if(this.dif == "normal"){
                    this.speedan = 0.3;
                }
                if(this.dif == "easy"){
                    this.speedan = 0.2;
                }
            }
            if(this.frameRate <= 10){
                if(this.dif == "hard"){
                    this.speedan = 0.7;
                }
                if(this.dif == "normal"){
                    this.speedan = 0.4;
                }
                if(this.dif == "easy"){
                    this.speedan = 0.3;
                }
            }
            if(app.keyboard.isPressed(pc.KEY_RIGHT)){
                this.force.x = (app.keyboard.isPressed(pc.input.KEY_RIGHT) - app.keyboard.isPressed(pc.input.KEY_LEFT)) * this.speedan;
                this.force.z = (app.keyboard.isPressed(pc.input.KEY_DOWN) - app.keyboard.isPressed(pc.input.KEY_UP)) * this.speedan;
            } else if(app.keyboard.isPressed(pc.KEY_LEFT)){
                this.force.x = (app.keyboard.isPressed(pc.input.KEY_RIGHT) - app.keyboard.isPressed(pc.input.KEY_LEFT)) * this.speedan;
                this.force.z = (app.keyboard.isPressed(pc.input.KEY_DOWN) - app.keyboard.isPressed(pc.input.KEY_UP)) * this.speedan;
            } else if(app.keyboard.isPressed(pc.KEY_DOWN)){
                this.force.x = (app.keyboard.isPressed(pc.input.KEY_RIGHT) - app.keyboard.isPressed(pc.input.KEY_LEFT)) * this.speedan;
                this.force.z = (app.keyboard.isPressed(pc.input.KEY_DOWN) - app.keyboard.isPressed(pc.input.KEY_UP)) * this.speedan;
            } else if(app.keyboard.isPressed(pc.KEY_UP)){
                this.force.x = (app.keyboard.isPressed(pc.input.KEY_RIGHT) - app.keyboard.isPressed(pc.input.KEY_LEFT)) * this.speedan;
                this.force.z = (app.keyboard.isPressed(pc.input.KEY_DOWN) - app.keyboard.isPressed(pc.input.KEY_UP)) * this.speedan;
            } else {
                this.force.x = (app.keyboard.isPressed(pc.input.KEY_D) - app.keyboard.isPressed(pc.input.KEY_A)) * this.speedan;
                this.force.z = (app.keyboard.isPressed(pc.input.KEY_S) - app.keyboard.isPressed(pc.input.KEY_W)) * this.speedan;
            }
            
            if (this.force.length()) {
                var rX = Math.cos(-Math.PI * 0.25);
                var rY = Math.sin(-Math.PI * 0.25);
                this.force.set(this.force.x * rX - this.force.z * rY, 0, this.force.z * rX + this.force.x * rY);
                
                if (this.force.length() > this.speedan) {
                    this.force.normalize().scale(this.speedan);
                }
            }
            this.entity.rigidbody.applyImpulse(this.force);
        }
    };

    return Movement;
});