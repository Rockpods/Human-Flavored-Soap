pc.script.attribute("cards", "asset", []);

pc.script.create('cardmanager', function (app) {
    // Creates a new Cardmanager instance
    var Cardmanager = function (entity) {
        this.entity = entity;
        this.allCards = ["As","2s","3s","4s","5s","6s","7s","8s","9s","10s","Js","Qs","Ks",
                        "Ad","2d","3d","4d","5d","6d","7d","8d","9d","10d","Jd","Qd","Kd",
                        "Ac","2c","3c","4c","5c","6c","7c","8c","9c","10c","Jc","Qc","Kc",
                        "Ah","2h","3h","4h","5h","6h","7h","8h","9h","10h","Jh","Qh","Kh"];
        this.dealerCardPositions = [
            new pc.Vec3(0.25,0.005,-0.924),
            new pc.Vec3(-0.25,0,-0.924),
            new pc.Vec3(1,0,-0.924),
            new pc.Vec3(-1.5,0,-0.924),
            new pc.Vec3(2.25,0,-0.924),
            new pc.Vec3(-2.75,0,-0.924),
            new pc.Vec3(3.5,0,-0.924),
            new pc.Vec3(-0.25,0,0.75),
            new pc.Vec3(1,0,0.75),
            new pc.Vec3(-1.5,0,0.75),
            new pc.Vec3(2.25,0,0.75)
        ];
        this.playerCardPositions = [
            new pc.Vec3(0,0.007,4),
            new pc.Vec3(0.5,0.008,4),
            new pc.Vec3(-0.5,0.006,4.1),
            new pc.Vec3(1,0.009,4.1),
            new pc.Vec3(-1,0.005,4.2),
            new pc.Vec3(1.5,0.01,4.2),
            new pc.Vec3(-1.5,0.004,4.4),
            new pc.Vec3(2,0.011,4.4),
            new pc.Vec3(-2,0.003,4.7),
            new pc.Vec3(-2.5,0.012,4.7),
            new pc.Vec3(3,0.013,5)            
        ];
        this.playerCards = [];
        this.dealerCards = [];
        this.playerTurn = false;
        this.dealingQueue = [];
        this.dealing = false;
        this.twisting = false;
        this.inGame = false;
    };

    Cardmanager.prototype = {
        // Called once after all resources are loaded and before the first update
        initialize: function () {
        },

        // Called every frame, dt is time in seconds since last update
        update: function (dt) {
            TWEEN.update();
            
            if(this.dealingQueue.length && !this.dealing){
                this.startTween(this.dealingQueue[0].entity, this.dealingQueue[0].from, this.dealingQueue[0].to, this.dealingQueue[0].hidden, this.dealingQueue[0].endRotation, this.dealingQueue[0].noRot);
                
                
                var that = this;
                setTimeout(function(){
                    that.dealingQueue[0].entity.enabled = true;
                    that.dealingQueue.shift();
                },30);
                
                
            }
        },
        
        scoreForCards: function(cards, dealer){
            var hardScore = 0;
            var softScore = 0;
            var acesCount = 0;
            
            for(var i = 0; i < cards.length; i++){
                var value = cards[i].charAt(0);
                
                switch(value){
                    case "A":
                        hardScore += 11;
                        softScore += 1;
                        acesCount++;
                        break;
                    case "2":
                        hardScore += 2;
                        softScore += 2;
                        break;
                    case "3":
                        hardScore += 3;
                        softScore += 3;
                        break;
                    case "4":
                        hardScore += 4;
                        softScore += 4;
                        break;
                    case "5":
                        hardScore += 5;
                        softScore += 5;
                        break;
                    case "6":
                        hardScore += 6;
                        softScore += 6;
                        break;
                    case "7":
                        hardScore += 7;
                        softScore += 7;
                        break;
                    case "8":
                        hardScore += 8;
                        softScore += 8;
                        break;
                    case "9":
                        hardScore += 9;
                        softScore += 9;
                        break;
                    case "1":
                    case "J":
                    case "Q":
                    case "K":
                        hardScore += 10;
                        softScore += 10;
                        break;
                }
            }
            
            var score = {
                hardScore: hardScore,
                softScore: softScore,
                textScore: ""
            };
            
            
            //Case hardscore is bust
            if(hardScore > 21){
                
                //If we have aces
                if(acesCount > 0){
                    if(hardScore < 32){
                        hardScore = score.hardScore = hardScore-10;
                    }
                    else if(acesCount > 1 && hardScore < 42){
                        hardScore = score.hardScore = hardScore-20;
                    }
                    else if(acesCount > 2 && hardScore < 52){
                        hardScore = score.hardScore = hardScore-30;
                    }
                    else if(acesCount > 3 && hardScore < 62){
                        hardScore = score.hardScore = hardScore-40;
                    }
                    else if(acesCount > 4 && hardScore < 72){
                        hardScore = score.hardScore = hardScore-50;
                    }
                    else if(acesCount > 5 && hardScore < 82){
                        hardScore = score.hardScore = hardScore-60;
                    }
                    else if(acesCount > 6 && hardScore < 92){
                        hardScore = score.hardScore = hardScore-70;
                    }
                    else if(acesCount > 7 && hardScore < 102){
                        hardScore = score.hardScore = hardScore-80;
                    }
                    else if(acesCount > 8 && hardScore < 112){
                        hardScore = score.hardScore = hardScore-90;
                    }
                    else if(acesCount > 9 && hardScore < 122){
                        hardScore = score.hardScore = hardScore-100;
                    }
                    else if(acesCount > 10 && hardScore < 132){
                        hardScore = score.hardScore = hardScore-110;
                    }
                    else if(acesCount > 11 && hardScore < 142){
                        hardScore = score.hardScore = hardScore-120;
                    }
                    else if(acesCount > 12 && hardScore < 152){
                        hardScore = score.hardScore = hardScore-130;
                    }
                    else if(acesCount > 13 && hardScore < 162){
                        hardScore = score.hardScore = hardScore-140;
                    }
                    else if(acesCount > 14 && hardScore < 172){
                        hardScore = score.hardScore = hardScore-150;
                    }
                    else if(acesCount > 15 && hardScore < 182){
                        hardScore = score.hardScore = hardScore-160;
                    }
                }
            }
            
            //Case Blackjack
            if(cards.length === 2 && hardScore === 21){
                score.textScore = "Blackjack";
            }
            else {
                if(softScore < hardScore && !dealer){
                    score.textScore = softScore.toString() + "/" + hardScore.toString();
                }
                else {
                    score.textScore = hardScore.toString();
                }
                
                if(score.softScore > 21)
                    score.textScore = score.textScore + " - Bust";
            }
            
            //Best score
            if(score.hardScore < 22){
                score.highestScore = score.hardScore;
            }
            else {
                score.highestScore = score.softScore;
            }
            
            return score;
        },
        
        initialDeal: function(){
            if(!this.inGame){
                this.inGame = true;
                
                //2 to player
                this.cardTo(true);
                this.cardTo(true);

                //2 to dealer
                this.cardTo(false);
                this.cardTo(false);

                this.displayCards(true,true);
                this.displayCards(false);

                //Show scores in UI
                this.entity.script.ui.hideScore(true);
                this.entity.script.ui.updateScore(false,this.scoreForCards(this.playerCards, false).textScore);
                this.playerTurn = true;

                if(this.scoreForCards(this.playerCards, false).textScore === "Blackjack"){
                    var that = this;
                    that.stick();
                    setTimeout(function(){
                        that.displayCards(true,false);
                    },1350);
                }
            }
        },
        
        cardTo: function(dealer){
            if(dealer){
                this.dealerCards.push(this.newCard(this.playerCards.concat(this.dealerCards)));
            }  
            else {
                this.playerCards.push(this.newCard(this.playerCards.concat(this.dealerCards)));
            }
        },
        
        newCard: function(notTheseCards){
            var newCard;
            
            while(!newCard){
                var tempCard = this.allCards[Math.floor(Math.random() * this.allCards.length)];
                if($.inArray(tempCard,notTheseCards) === -1){
                    newCard = tempCard;
                }
            }
            
            return newCard;
        },
        
        displayCards: function(dealer,hide){
            var card,material;
            
            if(dealer){
                if(hide){
                    card = app.root.findByName("DealerHidden");
                    if(!app.root.findByName("DealerHidden").enabled){
                        
                        this.queueUp({
                           entity: card,
                           from: new pc.Vec3(0,0.5,-7),
                           to: this.dealerCardPositions[0],
                           hidden: true,
                           endRotation:  card.getEulerAngles().clone(),
                           noRot: false
                        });
                    }
                    
                    card = app.root.findByName("Dealer1");
                    
                    if(!card.enabled){
                        this.queueUp({
                           entity: card,
                           from: new pc.Vec3(0,0.5,-7),
                           to: this.dealerCardPositions[1],
                           hidden: false,
                           endRotation:  card.getEulerAngles().clone(),
                           noRot: false
                        });
                    }
                    
                    card = card.findByName("Card_Front");
                    card.model.materialAsset = this.cards[$.inArray(this.dealerCards[0],this.allCards)];
                }
                else {
                    app.root.findByName("DealerHidden").enabled = false;
                    for(var i = 0; i < this.dealerCards.length; i++){
                        card = app.root.findByName("Dealer"+(i+1));
                        
                        if(!card.enabled && i !== 1){
                            this.queueUp({
                               entity: card,
                               from: new pc.Vec3(0,0.5,-7),
                               to: this.dealerCardPositions[i+1],
                               hidden: false,
                               endRotation:  card.getEulerAngles().clone(),
                               noRot: false
                            });
                        }
                        else if(!card.enabled && i === 1){
                            this.queueUp({
                               entity: card,
                               from: new pc.Vec3(0.25,0.005,-0.924),
                               to: this.dealerCardPositions[i+1],
                               hidden: false,
                               endRotation:  card.getEulerAngles().clone(),
                               noRot: true
                            });
                        }
                        
                        card = card.findByName("Card_Front");
                        card.model.materialAsset = this.cards[$.inArray(this.dealerCards[i],this.allCards)];
                    }
                }
            }
            else {
                for(var j = 0; j < this.playerCards.length; j++){
                    card = app.root.findByName("Player"+(j+1));
                    
                    if(!card.enabled){
                        this.queueUp({
                           entity: card,
                           from: new pc.Vec3(0,0.5,-7),
                           to: this.playerCardPositions[j],
                           hidden: false,
                           endRotation:  card.getEulerAngles().clone(),
                           noRot: false 
                        });
                    }
                    
                    card = card.findByName("Card_Front");
                    card.model.materialAsset = this.cards[$.inArray(this.playerCards[j],this.allCards)];
                }
            }
        },
        
        startTween: function (entity, from, to, hidden, endRotation, noRot) {
            var that = this;
            this.dealing = true;
            
            this.tween = new TWEEN.Tween({
                x: from.x,
                y: from.y,
                z: from.z
            }).to({
                x: to.x,
                y: to.y,
                z: to.z
            },300)
            .onUpdate(function () {
                entity.setLocalPosition(this.x, this.y, this.z);
                if(!noRot)
                    entity.rotate(0,15,0);
                
                if(entity.rigidbody){
                    entity.rigidbody.syncEntityToBody();
                }
                    
            }).onComplete(function () {
                that.dealing = false;
                
                if(hidden)
                    entity.setEulerAngles(endRotation);
                else
                    entity.setEulerAngles(endRotation);
            }).start();
        },
        
        restart: function(){            
            this.playerCards = [];
            this.dealerCards = [];
            
            var that = this;
            
            setTimeout(function(){
                for(var i = 1; i < 11; i++){
                    app.root.findByName("Player"+i).enabled = false;
                    app.root.findByName("Dealer"+i).enabled = false;
                }
                app.root.findByName("Player11").enabled = false;
                app.root.findByName("Player12").enabled = false;
                app.root.findByName("DealerHidden").enabled = false;

                that.playerTurn = true;
                app.root.findByName("Main").script.ui.drawBettingArea();
                app.root.findByName("Main").script.ui.hideScore();
                app.root.findByName("Main").script.ui.hideScore(true);
                that.inGame = false;
            },3000);
        },
        
        beWinner: function(playerWins,push){
            if(push){            
                app.root.findByName("Main").script.ui.animatedText("Push!");
                app.root.findByName("Main").script.game.payout(true,true,false);
            }
            else {
                if(playerWins){
                    app.root.findByName("Main").script.ui.animatedText("Player Wins!");
                    if(this.scoreForCards(this.playerCards, false).textScore === "Blackjack"){
                        app.root.findByName("Main").script.game.payout(true,false,true);
                    }
                    else {
                        app.root.findByName("Main").script.game.payout(true,false,false);
                    }
                }
                else {
                    app.root.findByName("Main").script.ui.animatedText("Dealer Wins!");
                    app.root.findByName("Main").script.game.payout(false,false,false);
                }
            }
            
            
            this.restart();
        },
        
        dealerPlay: function(){
            this.displayCards(true,false);
            this.entity.script.ui.updateScore(true,this.scoreForCards(this.dealerCards, true).textScore);
            
            while(this.scoreForCards(this.dealerCards, true).softScore < 17 &&
                  (this.scoreForCards(this.dealerCards,true).hardScore > 21 ||
                  this.scoreForCards(this.dealerCards,true).hardScore < 17) && !this.playerTurn){
                this.cardTo(true);
                this.displayCards(true,false);
                this.entity.script.ui.updateScore(true,this.scoreForCards(this.dealerCards, true).textScore);
            }
            
            if(this.scoreForCards(this.dealerCards, true).highestScore > 21){
                this.beWinner(true,false);
            }
            else if(this.scoreForCards(this.dealerCards,true).highestScore > this.scoreForCards(this.playerCards,false).highestScore){
                this.beWinner(false,false);
            }
            else if(this.scoreForCards(this.dealerCards,true).highestScore === this.scoreForCards(this.playerCards,false).highestScore){
                this.beWinner(false,true);
            }
            else if(this.scoreForCards(this.dealerCards,true).highestScore < this.scoreForCards(this.playerCards,false).highestScore){
                this.beWinner(true,false);
            }
        },
        
        twist: function(force){
            if(this.playerTurn && this.scoreForCards(this.playerCards, false).softScore < 21 && !this.dealing  &&!this.twisting){
                
                if(!force && this.scoreForCards(this.playerCards, false).hardScore > 18 && this.scoreForCards(this.playerCards, false).softScore > 18){
                    app.root.findByName("Main").script.ui.drawAreYouSure();
                    return false;
                }
                
                this.twisting = true;
                this.cardTo(false);
                this.displayCards();
                this.entity.script.ui.updateScore(false,this.scoreForCards(this.playerCards, false).textScore);
                
                if(this.scoreForCards(this.playerCards, false).softScore > 21){
                    this.playerTurn = false;
                    this.displayCards(true,false);
                    this.beWinner();
                }
                
                var that= this;
                setTimeout(function(){that.twisting = false;},500);
            }
        },
        
        stick: function(){
            if(this.playerTurn){
                this.playerTurn = false;
                this.dealerPlay();
            }
        },
        
        queueUp: function(obj){
          if(!this.onList(obj.entity.getName())){
              this.dealingQueue.push(obj);
          }
        },
        
        onList: function(name){
            for(var i = 0; i < this.dealingQueue.length; i++){
                if(this.dealingQueue[i].entity.getName() === name)
                    return true;
            }
            
            return false;
        },
        
        drawBothScores: function(){
            if(this.scoreForCards(this.playerCards, false).softScore > 0)
                this.entity.script.ui.updateScore(false,this.scoreForCards(this.playerCards, false).textScore);
            
            if(this.scoreForCards(this.dealerCards, false).softScore > 0)
                this.entity.script.ui.updateScore(true,this.scoreForCards(this.dealerCards, true).textScore);
        }
    };

    return Cardmanager;
});