pc.script.attribute('speed', 'number', 0.1, {
    min: 0.05,
    max: 0.3,
    step: 0.05,
    decimalPrecision: 2
});
var xpos = -3;
var zpos = 0;
var shrink = 0.01;
pc.script.create('platMove', function (app) {
    // Creates a new PlatMove instance
    var PlatMove = function (entity) {
        this.entity = entity;
        this.material = this.entity.findByName('material');
        this.portal1 = this.entity.findByName('Portal1');
        this.portal2 = this.entity.findByName('Portal2');
        this.portal1.collision.on('collisionstart', this.start, this);
    };

    PlatMove.prototype = {
        // Called once after all resources are loaded and before the first update
        initialize: function () {
            shrink = 0.01;
            xpos = -3;
            zpos = 0;
            document.addEventListener('myEvent', this.initialize, this);
        },

        start: function(){
            this.scale = true;
        },

        teleport: function(){
            xpos = this.portal2Pos.x;
            zpos = this.portal2Pos.z;
            this.material.setLocalPosition(xpos,0,zpos);
            this.material.rigidbody.syncEntityToBody();
            app.context.root.findByName('soundeffects2').audiosource.play('portal');
        },

        // Called every frame, dt is time in seconds since last update
        update: function (dt) {
            if(this.scale === true){
                shrink -= 0.1;
                if(shrink <= 0){
                    this.teleport();
                    this.scale = false;
                }
            }
            shrink += 0.05;
            if(shrink >= 1){
                shrink = 1;
            }
            this.portal1Pos = this.portal1.getLocalPosition();
            this.portal2Pos = this.portal2.getLocalPosition();
            this.opp = this.portal1Pos.x - this.portal2Pos.x;
            this.adj = this.portal1Pos.z - this.portal2Pos.z;
            this.hyp = Math.sqrt((this.opp * this.opp) + (this.adj * this.adj));
            this.xSpeed = (this.opp / this.hyp) * this.speed;
            this.zSpeed = (this.adj / this.hyp) * this.speed;
            xpos += this.xSpeed;
            zpos += this.zSpeed;
            this.material.setLocalPosition(xpos,0,zpos);
            this.material.rigidbody.syncEntityToBody();
            this.material.setLocalScale(shrink,shrink,shrink);
        }
    };

    return PlatMove;
});